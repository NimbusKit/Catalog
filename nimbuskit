#!/usr/bin/env python
# encoding: utf-8
"""
nimbuskit

Copyright 2011-2014 NimbusKit

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"""

import logging
import re
import os
import string
import sys
from optparse import OptionParser

features = [
	"Actions",
	"AttributedLabel",
	"Badge",
	"Collections",
	"Core",
	"Interapp",
	"NetworkImage",
	"Overview",
	"PagingScrollView",
	"Photos",
	"SnapshotRotation",
	"Tables",
	"TableViewController",
	"TextField",
	"WebController"
]

def status():
	cwd = os.getcwd()
	for feature in features:
		foldername=string.lower(feature)
		featurefolder="features/"+foldername

		logging.info("Checking " + feature)
		os.chdir(featurefolder)
		f=os.popen("git status")
		output = string.join(f.readlines(), "")
		match = re.search('nothing to commit', output)
		if not match:
			print "Status of " + feature
			print result
		os.chdir(cwd)

def commit():
	cwd = os.getcwd()
	for feature in features:
		foldername=string.lower(feature)
		featurefolder="features/"+foldername

		os.chdir(featurefolder)

		logging.info("Checking " + feature)
		f=os.popen("git status")
		output = string.join(f.readlines(), "")
		match = re.search('nothing to commit', output)
		if not match:
			os.system("git add .")
			os.system("git commit -a")

		os.chdir(cwd)

def main():
	usage = '''%prog [options] command(s)

EXAMPLES:

    Status of all features:
    > %prog status

	git add .;git commit -a for all features:
    > %prog commit'''
	parser = OptionParser(usage = usage)
	
	parser.add_option("-v", "--verbose", dest="verbose",
	                  help="Display verbose output",
	                  action="store_true")

	(options, args) = parser.parse_args()

	if options.verbose:
		log_level = logging.INFO
	else:
		log_level = logging.WARNING

	logging.basicConfig(level=log_level)

	did_anything = False
	for command in args:
		if command == 'status':
			status()
			did_anything = True
		elif command == 'commit':
			commit()
			did_anything = True

	if not did_anything:
		parser.print_help()


if __name__ == "__main__":
	sys.exit(main())


